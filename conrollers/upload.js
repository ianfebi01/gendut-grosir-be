const cloudinary = require("cloudinary");
const fs = require("fs");
cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.CLOUD_API_KEY,
  api_secret: process.env.CLOUD_API_SECRET,
});

exports.uploadImages = async (req, res) => {
  try {
    const { path } = req.body;
    let files = Object.values(req.files).flat();
    let images = [];
    for (const file of files) {
      const url = await uploadToCloudinary(file, path);
      images.push(url);
      removeTmp(file.tempFilePath);
    }
    res.json(images);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};
exports.deleteImage = async (req, res) => {
  try {
    const { publicId } = req.body;
    const delImg = await cloudinary.v2.uploader.destroy(publicId, {
      resource_type: "image",
    });
    //   .then((result) => console.log(result));
    res.json(delImg);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

const uploadToCloudinary = async (file, path) => {
  return await cloudinary.v2.uploader.upload(
    file.tempFilePath,
    { folder: path, tags: "basic_sample" },
    function (err, image) {
      // console.log(image);
      // console.log("** File Upload");
      if (err) {
        console.warn(err);
        // return res.status(400).json({ message: "Upload image failed." });
      }
      // console.log(
      //   "* public_id for the uploaded image is generated by Cloudinary's service."
      // );
      // console.log("* " + image.public_id);
      // console.log("* " + image.url);
      // waitForAllUploads(file.tempFilePath, err, image);
    }
  );
  // return new Promise((resolve) => {
  //   cloudinary.v2.uploader.upload(
  //     file.tempFilePath,
  //     {
  //       folder: path,
  //     },
  //     (err, res) => {
  //       if (err) {
  //         removeTmp(file.tempFilePath);
  //         return res.status(400).send({ message: "Upload image failed." });
  //       }
  //       resolve({
  //         url: res.secure_url,
  //         //   res,
  //       });
  //     }
  //   );
  // });
};

const removeTmp = (path) => {
  fs.unlink(path, (err) => {
    if (err) throw err;
  });
};
